'use client';

import React, { useEffect } from 'react';
import Advise from '@/components/advise/Advise';
import { motion, useAnimation } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import { useTheme } from '@/context/ThemeContext';
import Link from 'next/link';
import { CircleDollarSign, Clock, Pencil, Lightbulb } from 'lucide-react';
import Image from 'next/image';

export default function AdvisePage() {
    const { isDarkMode } = useTheme();

    // Animation controls for each section
    const headerControls = useAnimation();
    const formSectionControls = useAnimation();
    const guideSectionControls = useAnimation();
    const faqSectionControls = useAnimation();
    const ctaSectionControls = useAnimation();

    // Intersection observers for each section with improved thresholds for mobile
    const [headerRef, headerInView] = useInView({ threshold: 0.1, triggerOnce: true });
    const [formSectionRef, formSectionInView] = useInView({ threshold: 0.05, triggerOnce: true });
    const [, guideSectionInView] = useInView({ threshold: 0.05, triggerOnce: true });
    const [faqSectionRef, faqSectionInView] = useInView({ threshold: 0.05, triggerOnce: true });
    const [ctaSectionRef, ctaSectionInView] = useInView({ threshold: 0.1, triggerOnce: true });

    // Trigger animations when sections come into view
    useEffect(() => {
        if (headerInView) headerControls.start('visible');
        if (formSectionInView) formSectionControls.start('visible');
        if (guideSectionInView) guideSectionControls.start('visible');
        if (faqSectionInView) faqSectionControls.start('visible');
        if (ctaSectionInView) ctaSectionControls.start('visible');
    }, [
        headerInView, headerControls,
        formSectionInView, formSectionControls,
        guideSectionInView, guideSectionControls,
        faqSectionInView, faqSectionControls,
        ctaSectionInView, ctaSectionControls
    ]);

    // Enhanced animations with responsive timing
    const fadeInLeft = {
        hidden: { opacity: 0, x: -30 },
        visible: {
            opacity: 1,
            x: 0,
            transition: { duration: 0.6, ease: "easeOut" }
        }
    };

    const fadeInRight = {
        hidden: { opacity: 0, x: 30 },
        visible: {
            opacity: 1,
            x: 0,
            transition: { duration: 0.6, ease: "easeOut" }
        }
    };

    const fadeInUp = {
        hidden: { opacity: 0, y: 20 },
        visible: {
            opacity: 1,
            y: 0,
            transition: { duration: 0.5, ease: "easeOut" }
        }
    };

    const staggerContainerLeft = {
        hidden: { opacity: 0 },
        visible: {
            opacity: 1,
            transition: {
                staggerChildren: 0.12,
                delayChildren: 0.08
            }
        }
    };

    const staggerContainerRight = {
        hidden: { opacity: 0 },
        visible: {
            opacity: 1,
            transition: {
                staggerChildren: 0.12,
                delayChildren: 0.2
            }
        }
    };

    // Updated color scheme for FAQs with more vibrant icons
    const faqs = [
        {
            icon: <CircleDollarSign className={`w-5 h-5 ${isDarkMode ? 'text-emerald-400' : 'text-emerald-500'}`} />,
            image: "/images/courses/adv1.png",
            question: "T√¥i c√≥ ph·∫£i tr·∫£ ph√≠ ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n kh√¥ng?",
            answer: "Kh√¥ng, d·ªãch v·ª• t∆∞ v·∫•n c·ªßa ch√∫ng t√¥i ho√†n to√†n mi·ªÖn ph√≠. B·∫°n ch·ªâ thanh to√°n h·ªçc ph√≠ khi quy·∫øt ƒë·ªãnh ƒëƒÉng k√Ω kh√≥a h·ªçc."
        },
        {
            icon: <Clock className={`w-5 h-5 ${isDarkMode ? 'text-purple-400' : 'text-purple-500'}`} />,
            image: "/images/courses/adv2.png",
            question: "M·∫•t bao l√¢u ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi sau khi ƒëƒÉng k√Ω t∆∞ v·∫•n?",
            answer: "ƒê·ªôi ng≈© t∆∞ v·∫•n vi√™n c·ªßa ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong v√≤ng 24 gi·ªù k·ªÉ t·ª´ khi nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu t∆∞ v·∫•n."
        },
        {
            icon: <Pencil className={`w-5 h-5 ${isDarkMode ? 'text-amber-400' : 'text-amber-500'}`} />,
            image: "/images/courses/adv3.png",
            question: "T√¥i c√≥ th·ªÉ thay ƒë·ªïi th√¥ng tin sau khi ƒë√£ ƒëƒÉng k√Ω t∆∞ v·∫•n kh√¥ng?",
            answer: "C√≥, b·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email ho·∫∑c hotline ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin sau khi ƒë√£ ƒëƒÉng k√Ω."
        },
        {
            icon: <Lightbulb className={`w-5 h-5 ${isDarkMode ? 'text-rose-400' : 'text-rose-500'}`} />,
            image: "/images/courses/adv4.png",
            question: "T√¥i ch∆∞a bi·∫øt n√™n h·ªçc kh√≥a h·ªçc n√†o, trung t√¢m c√≥ th·ªÉ gi√∫p t√¥i kh√¥ng?",
            answer: "ƒê√≥ ch√≠nh l√† m·ª•c ti√™u c·ªßa d·ªãch v·ª• t∆∞ v·∫•n! Ch√∫ng t√¥i s·∫Ω ƒë√°nh gi√° tr√¨nh ƒë·ªô, t√¨m hi·ªÉu m·ª•c ti√™u c·ªßa b·∫°n v√† ƒë·ªÅ xu·∫•t l·ªô tr√¨nh h·ªçc t·∫≠p ph√π h·ª£p nh·∫•t."
        }
    ];

    // Enhanced gradient backgrounds
    const gradientBg = isDarkMode
        ? 'bg-gradient-to-br from-gray-900 to-gray-800'
        : 'bg-gradient-to-br from-gray-50 to-white';

    const cardGradient = isDarkMode
        ? 'bg-gradient-to-br from-gray-800 to-gray-700'
        : 'bg-gradient-to-br from-white to-gray-50';

    return (
        <div className={`min-h-screen ${gradientBg}`}>
            <div className="container mx-auto px-4 sm:px-6 py-8 sm:py-12">
                {/* Header - Improved responsive text sizes */}
                <motion.div
                    ref={headerRef}
                    initial="hidden"
                    animate={headerControls}
                    variants={fadeInUp}
                    className="text-center mb-10 sm:mb-16"
                >
                    <h1 className={`text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold mb-4 sm:mb-6 ${isDarkMode ? 'text-white' : 'text-gray-800'} tracking-tight`}>
                        T∆∞ v·∫•n l·ªô tr√¨nh h·ªçc <span className={isDarkMode ? 'text-indigo-400' : 'text-indigo-600'}>Ti·∫øng Anh</span>
                    </h1>
                    <p className={`text-base sm:text-lg md:text-xl ${isDarkMode ? 'text-gray-300' : 'text-gray-600'} max-w-3xl mx-auto leading-relaxed px-2`}>
                        ƒê·ªôi ng≈© chuy√™n gia c·ªßa ch√∫ng t√¥i s·∫Ω gi√∫p b·∫°n ch·ªçn l·ªô tr√¨nh h·ªçc ph√π h·ª£p nh·∫•t
                        v·ªõi m·ª•c ti√™u v√† kh·∫£ nƒÉng c·ªßa b·∫°n.
                    </p>
                </motion.div>

                {/* Form and Guide Section - Improved responsive layout */}
                <div
                    ref={formSectionRef}
                    className="grid grid-cols-1 lg:grid-cols-5 gap-4 sm:gap-6 lg:gap-8 mb-10 sm:mb-16"
                >
                    {/* Left side - Guide steps */}
                    <motion.div
                        className="lg:col-span-2 order-2 lg:order-1"
                        initial="hidden"
                        animate={formSectionControls}
                        variants={staggerContainerLeft}
                    >
                        <div className={`rounded-xl sm:rounded-2xl shadow-lg sm:shadow-xl overflow-hidden ${cardGradient} border ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
                            <div className="p-4 sm:p-6 md:p-8">
                                <motion.ul variants={staggerContainerLeft} className="space-y-4 sm:space-y-6 lg:space-y-8">
                                    {[
                                        {
                                            title: "ƒêi·ªÅn th√¥ng tin c√° nh√¢n",
                                            description: "Cung c·∫•p h·ªç t√™n, email v√† s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ li√™n h·ªá v·ªõi b·∫°n.",
                                            icon: "üë§",
                                            bgColor: isDarkMode ? 'bg-indigo-900/40' : 'bg-indigo-100'
                                        },
                                        {
                                            title: "Ch·ªçn ƒë·ªãa ch·ªâ",
                                            description: "Ch·ªçn t·ªânh/th√†nh ph·ªë, qu·∫≠n/huy·ªán v√† ph∆∞·ªùng/x√£ n∆°i b·∫°n ƒëang sinh s·ªëng.",
                                            icon: "üìç",
                                            bgColor: isDarkMode ? 'bg-emerald-900/40' : 'bg-emerald-100'
                                        },
                                        {
                                            title: "N√™u y√™u c·∫ßu",
                                            description: "M√¥ t·∫£ m·ª•c ti√™u h·ªçc t·∫≠p, tr√¨nh ƒë·ªô hi·ªán t·∫°i v√† th·ªùi gian c√≥ th·ªÉ tham gia kh√≥a h·ªçc.",
                                            icon: "üìù",
                                            bgColor: isDarkMode ? 'bg-amber-900/40' : 'bg-amber-100'
                                        },
                                        {
                                            title: "G·ª≠i y√™u c·∫ßu",
                                            description: "X√°c nh·∫≠n th√¥ng tin v√† g·ª≠i y√™u c·∫ßu t∆∞ v·∫•n. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá trong v√≤ng 24 gi·ªù.",
                                            icon: "‚úâÔ∏è",
                                            bgColor: isDarkMode ? 'bg-rose-900/40' : 'bg-rose-100'
                                        }
                                    ].map((step, index) => (
                                        <motion.li
                                            key={index}
                                            variants={fadeInLeft}
                                            className={`flex items-start ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}
                                        >
                                            <div className={`flex-shrink-0 w-10 h-10 sm:w-12 sm:h-12 rounded-full flex items-center justify-center mr-3 sm:mr-4 ${step.bgColor} shadow-md`}>
                                                <span className="text-lg sm:text-xl">{step.icon}</span>
                                            </div>
                                            <div>
                                                <h3 className={`text-base sm:text-lg font-semibold mb-1 sm:mb-2 ${isDarkMode ? 'text-white' : 'text-gray-800'}`}>
                                                    {step.title}
                                                </h3>
                                                <p className={`text-sm sm:text-base ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                                                    {step.description}
                                                </p>
                                            </div>
                                        </motion.li>
                                    ))}
                                </motion.ul>
                            </div>
                        </div>
                    </motion.div>

                    {/* Right side - Form */}
                    <motion.div
                        className="lg:col-span-3 order-1 lg:order-2"
                        initial="hidden"
                        animate={formSectionControls}
                        variants={fadeInRight}
                    >
                        <div className={`rounded-xl sm:rounded-2xl shadow-lg sm:shadow-xl overflow-hidden border ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
                            <Advise onClose={() => { }} />
                        </div>
                    </motion.div>
                </div>

                {/* FAQ Section - Improved responsive grid */}
                <motion.div
                    ref={faqSectionRef}
                    initial="hidden"
                    animate={faqSectionControls}
                    variants={staggerContainerRight}
                    className="mb-10 sm:mb-16"
                >
                    <div className="p-2 sm:p-4 md:p-6 max-w-6xl mx-auto">
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                            {faqs.map((faq, index) => (
                                <motion.div
                                    key={index}
                                    variants={index % 2 === 0 ? fadeInLeft : fadeInRight}
                                    className={`p-4 sm:p-5 md:p-6 rounded-lg sm:rounded-xl ${cardGradient} shadow-md sm:shadow-lg border ${isDarkMode ? 'border-gray-700/50' : 'border-gray-100'} transition-all hover:shadow-xl hover:scale-[1.01] sm:hover:scale-[1.02] duration-300`}
                                >
                                    {/* Mobile layout - improved spacing */}
                                    <div className="block sm:hidden">
                                        <div className="flex items-center gap-3 mb-3">
                                            <div className={`flex-shrink-0 w-14 h-14 rounded-full overflow-hidden border-2 ${isDarkMode ? 'border-gray-600' : 'border-gray-200'} shadow-md`}>
                                                <Image
                                                    src={faq.image}
                                                    alt="FAQ illustration"
                                                    width={500}
                                                    height={500}
                                                    className="w-full h-full object-cover"
                                                />
                                            </div>
                                            <div className="flex-1">
                                                <div className="flex items-center gap-2 mb-1">
                                                    {faq.icon}
                                                    <h3 className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-800'}`}>
                                                        {faq.question}
                                                    </h3>
                                                </div>
                                            </div>
                                        </div>
                                        <p className={`text-xs sm:text-sm leading-relaxed ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                                            {faq.answer}
                                        </p>
                                    </div>

                                    {/* Desktop layout - improved spacing and alignment */}
                                    <div className="hidden sm:flex items-start gap-4 md:gap-5">
                                        <div className={`flex-shrink-0 w-16 h-16 md:w-20 md:h-20 rounded-full overflow-hidden border-2 ${isDarkMode ? 'border-gray-600' : 'border-gray-200'} shadow-md`}>
                                            <Image
                                                src={faq.image}
                                                alt="FAQ illustration"
                                                width={500}
                                                height={500}
                                                className="w-full h-full object-cover"
                                            />
                                        </div>
                                        <div className="flex-1">
                                            <div className="flex items-center gap-2 mb-1 md:mb-2">
                                                {faq.icon}
                                                <h3 className={`text-base md:text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-800'}`}>
                                                    {faq.question}
                                                </h3>
                                            </div>
                                            <p className={`text-sm md:text-base leading-relaxed ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                                                {faq.answer}
                                            </p>
                                        </div>
                                    </div>
                                </motion.div>
                            ))}
                        </div>
                    </div>
                </motion.div>

                {/* CTA Section - Improved responsive button */}
                <motion.div
                    ref={ctaSectionRef}
                    initial="hidden"
                    animate={ctaSectionControls}
                    variants={fadeInUp}
                    className="text-center pt-4 sm:pt-6 md:pt-8"
                >
                    <p className={`mb-4 sm:mb-6 text-base sm:text-lg ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                        B·∫°n ƒë√£ s·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh h·ªçc ti·∫øng Anh c√πng ch√∫ng t√¥i?
                    </p>
                    <div className="flex flex-col sm:flex-row justify-center gap-3 sm:gap-4">
                        <Link href="/course/course-page" legacyBehavior>
                            <a
                                className={`py-3 sm:py-4 px-6 sm:px-8 rounded-lg font-medium transition duration-300 transform hover:scale-102 sm:hover:scale-105 shadow-md sm:shadow-lg ${isDarkMode
                                    ? 'bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700 text-white'
                                    : 'bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white'
                                    }`}
                            >
                                Xem Kh√≥a H·ªçc C·ªßa Ch√∫ng T√¥i
                            </a>
                        </Link>
                    </div>
                </motion.div>
            </div>
        </div>
    );
}